// Code generated by MockGen. DO NOT EDIT.
// Source: event_handler.go
//
// Generated by this command:
//
//	mockgen -source event_handler.go -destination event_handler_mock_test.go -package topiclistenerinternal -write_package_comment=false --typed
package topiclistenerinternal

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// OnReadMessages mocks base method.
func (m *MockEventHandler) OnReadMessages(ctx context.Context, req PublicReadMessages) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnReadMessages", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnReadMessages indicates an expected call of OnReadMessages.
func (mr *MockEventHandlerMockRecorder) OnReadMessages(ctx, req any) *EventHandlerOnReadMessagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReadMessages", reflect.TypeOf((*MockEventHandler)(nil).OnReadMessages), ctx, req)
	return &EventHandlerOnReadMessagesCall{Call: call}
}

// EventHandlerOnReadMessagesCall wrap *gomock.Call
type EventHandlerOnReadMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *EventHandlerOnReadMessagesCall) Return(arg0 error) *EventHandlerOnReadMessagesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *EventHandlerOnReadMessagesCall) Do(f func(context.Context, PublicReadMessages) error) *EventHandlerOnReadMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *EventHandlerOnReadMessagesCall) DoAndReturn(f func(context.Context, PublicReadMessages) error) *EventHandlerOnReadMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnStartPartitionSessionRequest mocks base method.
func (m *MockEventHandler) OnStartPartitionSessionRequest(ctx context.Context, event PublicStartPartitionSessionEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStartPartitionSessionRequest", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStartPartitionSessionRequest indicates an expected call of OnStartPartitionSessionRequest.
func (mr *MockEventHandlerMockRecorder) OnStartPartitionSessionRequest(ctx, event any) *EventHandlerOnStartPartitionSessionRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStartPartitionSessionRequest", reflect.TypeOf((*MockEventHandler)(nil).OnStartPartitionSessionRequest), ctx, event)
	return &EventHandlerOnStartPartitionSessionRequestCall{Call: call}
}

// EventHandlerOnStartPartitionSessionRequestCall wrap *gomock.Call
type EventHandlerOnStartPartitionSessionRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *EventHandlerOnStartPartitionSessionRequestCall) Return(arg0 error) *EventHandlerOnStartPartitionSessionRequestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *EventHandlerOnStartPartitionSessionRequestCall) Do(f func(context.Context, PublicStartPartitionSessionEvent) error) *EventHandlerOnStartPartitionSessionRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *EventHandlerOnStartPartitionSessionRequestCall) DoAndReturn(f func(context.Context, PublicStartPartitionSessionEvent) error) *EventHandlerOnStartPartitionSessionRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnStopPartitionSessionRequest mocks base method.
func (m *MockEventHandler) OnStopPartitionSessionRequest(ctx context.Context, event PublicStopPartitionSessionEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStopPartitionSessionRequest", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStopPartitionSessionRequest indicates an expected call of OnStopPartitionSessionRequest.
func (mr *MockEventHandlerMockRecorder) OnStopPartitionSessionRequest(ctx, event any) *EventHandlerOnStopPartitionSessionRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStopPartitionSessionRequest", reflect.TypeOf((*MockEventHandler)(nil).OnStopPartitionSessionRequest), ctx, event)
	return &EventHandlerOnStopPartitionSessionRequestCall{Call: call}
}

// EventHandlerOnStopPartitionSessionRequestCall wrap *gomock.Call
type EventHandlerOnStopPartitionSessionRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *EventHandlerOnStopPartitionSessionRequestCall) Return(arg0 error) *EventHandlerOnStopPartitionSessionRequestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *EventHandlerOnStopPartitionSessionRequestCall) Do(f func(context.Context, PublicStopPartitionSessionEvent) error) *EventHandlerOnStopPartitionSessionRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *EventHandlerOnStopPartitionSessionRequestCall) DoAndReturn(f func(context.Context, PublicStopPartitionSessionEvent) error) *EventHandlerOnStopPartitionSessionRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
